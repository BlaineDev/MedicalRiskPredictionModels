#+superman-export-target: rmd/html

#+BEGIN_SRC R :results output raw drawer  :exports code  :eval (never-plain-export) :session *R* :cache no
library(MedicalRiskPredictionModels)
dataMRPM()
#+END_SRC

#+RESULTS:
:results:

Prepared data for Medical Risk Prediction Models (Gerds & Kattan):

THE DATA PROVIDED HERE ARE NOT THE REAL DATA BUT COMPUTER MODIFIED CLONES

In vitro fertilization study
   training data: ivftrain
 validation data: ivftest

Oral cancer study
   training data: octrain
 validation data: octest

Active surveillance prostate cancer study
  training data: astrain
validation data: astest

PSA measurements
 longitudinal data: long

Example time to event data: d
:end:

# Chunk: 1-------
#+BEGIN_SRC R  :results output raw drawer :exports code  :eval (never-plain-export) :session *R* :cache yes 
# Chunk1
library(Publish)
library(data.table)
data(Diabetes)
setDT(Diabetes)
Diabetes[1:5,.(weight,height)]
#+END_SRC

#+RESULTS[<2020-06-13 12:27:07> 3fcd7ff67ca12a3df0ccc6d3fbc1ec33f4fd26e9]:
:results:
   weight height
1:    121     62
2:    218     64
3:    256     61
4:    119     67
5:    183     68
:end:

# Chunk: 2-------
#+BEGIN_SRC R :exports code :eval (never-plain-export) :results output raw drawer  :session *R* :cache yes 
# Chunk2
library(data.table)
Diabetes[,height.m:= height*0.0254]
Diabetes[,weight.kg:= weight* 0.4535929]
Diabetes[,bmi:= weight.kg/height.m^2]
Diabetes[,BMI:=cut(bmi,c(0,18,25,30,Inf),labels=c("UnderWeight","NormalWeight","OverWeight","Obese"))]
Diabetes[,.(bmi,BMI,weight,height)]
#+END_SRC

#+RESULTS[<2020-06-13 12:27:07> 9788768c2db72794093df922687294ece0aefa56]:
:results:
          bmi          BMI weight height
  1: 22.13099 NormalWeight    121     62
  2: 37.41927        Obese    218     64
  3: 48.37034        Obese    256     61
  4: 18.63787 NormalWeight    119     67
  5: 27.82480   OverWeight    183     68
 ---                                    
399: 25.54740   OverWeight    173     69
400: 27.27963   OverWeight    154     63
401: 24.66136 NormalWeight    167     69
402: 34.89667        Obese    197     63
403: 37.76257        Obese    220     64
:end:

# Chunk: 3-------
#+BEGIN_SRC R  :results output raw drawer  :exports code  :eval (never-plain-export) :session *R* :cache yes 
# Chunk3
library(data.table)
long <- long[,list("psa.time"=psadate-psadate[1],psadate,psa),by=subject]
long <- long[psa.time<=(2*365.25),]
# psa doubling time formula
psadt <- function(time,value){ # input date and psa value
  (log(2)/coef(lm(log(value)~time))[2])/365.25 # lm is linear model
}
# now apply function to individual subjects
long[,list("psa.doublingtime"=psadt(psa.time,psa)),by=subject]
#+END_SRC

#+RESULTS[<2020-06-13 12:27:07> 778307d29bfba38a027eee07fd5e8e03fdd97532]:
:results:
   subject psa.doublingtime
1:     146        0.4246441
2:     151        9.3932748
:end:

# Chunk: 4-------
#+BEGIN_SRC R :exports code :eval (never-plain-export) :results output raw drawer :session *R* :cache yes :float
# Chunk4 (no competing risks)
library(data.table)
setDT(d)
d[,af.date:=as.Date(af.date)]
d[,death.date:=as.Date(death.date)]
d[,lost.date:=as.Date(lost.date)]
d[,time:=pmin(  # parallel minimum
     death.date, # event 
     lost.date,  # lost to followup
     as.Date("2015-01-01") # administrative censoring
,na.rm=TRUE)
-af.date # date of subject specific time origin
]
d[,event:=0] # initialize all subjects
d[!is.na(death.date),event:=1] # event 
d
#+END_SRC

#+RESULTS[<2020-06-13 12:27:07> f1b05c301a2bdab7e068a1935e0f9128f4f5c3da]:
:results:
   id    af.date death.date stroke.date  lost.date      time event
1:  1 2001-04-25       <
 2005-11-16       <
4999 days     0
2:  2 1995-02-16 2011-10-27        <
      <
6097 days     1
3:  3 2001-09-09       <
       <
      <
4862 days     0
4:  4 1999-12-20 2009-01-02  2007-09-01       <
3301 days     1
5:  5 1997-05-27       <
 1999-12-18 2008-08-17 4100 days     0
:end:

# Chunk: 5-------
#+BEGIN_SRC R :exports code :eval (never-plain-export) :results output raw drawer :session *R* :cache yes 
# Chunk5 (with competing risks)
library(data.table)
d[,af.date:=as.Date(af.date)]
d[,stroke.date:=as.Date(stroke.date)]
d[,death.date:=as.Date(death.date)]
d[,lost.date:=as.Date(lost.date)]
d[,time:=pmin(    # parallel minimum
     stroke.date, # event 
     death.date,  # competing risk 
     lost.date,   # lost to followup
     as.Date("2015-01-01") # administrative censoring
,na.rm=TRUE)
-af.date # date of subject specific time origin
]
d[,event:=0] # initialize all subjects
d[!is.na(stroke.date),event:=1] # event 
d[!is.na(death.date) & is.na(stroke.date),event:=2] # competing
d
#+END_SRC

#+RESULTS[<2020-06-13 12:27:07> 465e69f1fd167dd5e7346ad3ee25a26ae45b92b0]:
:results:
   id    af.date death.date stroke.date  lost.date      time event
1:  1 2001-04-25       <
 2005-11-16       <
1666 days     1
2:  2 1995-02-16 2011-10-27        <
      <
6097 days     2
3:  3 2001-09-09       <
       <
      <
4862 days     0
4:  4 1999-12-20 2009-01-02  2007-09-01       <
2812 days     1
5:  5 1997-05-27       <
 1999-12-18 2008-08-17  935 days     1
:end:

# Chunk: 6-------
#+BEGIN_SRC R  :results output raw drawer  :exports code  :eval (never-plain-export) :session *R* :cache yes  :eval never
# Chunk6
library(data.table)
d[,time.5:=pmin(time,5*365.25)]
d[,event.5:=event]
d[time>5*365.25,event.5:=0]
d[,.(time,event,time.5,event.5)]
#+END_SRC

